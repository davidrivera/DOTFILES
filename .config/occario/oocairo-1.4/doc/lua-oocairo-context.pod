=head1 Name

lua-oocairo-context - Drawing context objects

=head1 Introduction

A context object is used to perform all the drawing operations on a
Cairo surface.  Context objects can be created by calling the
C<context_create> function in the module table returned from C<require>
and passing in a surface object.

=head1 Methods

The following methods are available on context objects:

=over

=item cr:append_path (path)

Add the path instructions from I<path> to the current path of I<cr>.
The I<path> value should be an object returned from the C<cr:copy_path()>
or C<cr:copy_path_flat()> method.

=item cr:arc (cx, cy, radius, angle1, angle2)

Add a curved segment to the current path which approximates a section
of a circle centered at point S<(I<cx>, I<cy>)> with a radius of I<radius>.
The two angles determine which part of the circle to draw.  They are both
measured in radians.  For a complete circle I<angle1> should be zero, and
I<angle2> should be 2pi.

=for syntax-highlight lua

    -- Draw a complete circle.
    local PI = 2 * math.asin(1)
    local x, y, radius = 50, 100, 23
    cr:arc(x, y, radius, 0, 2 * PI)
    cr:stroke()

All five arguments to the method must be numbers.

A straight line will be added to the path from the current point to the
start of the arc, if there is a current point.  To avoid this, call
C<cr:new_sub_path()> before adding the arc.

=item cr:arc_negative (cx, cy, radius, angle1, angle2)

Same as C<cr:arc()>, but goes the opposite way round the circle.

=item cr:clip ()

From now on clip anything outside the current path, preventing it from
being drawn, and then discard the path.

=item cr:clip_extents ()

Returns four numbers in two pairs, the I<x> and I<y> coordinates of the
corners of a rectangle which encloses the area of the surface where drawing
can still take place when clipping is taken in to account.

=item cr:clip_preserve ()

Same as C<cr:clip()> but keeps the current path.

=item cr:close_path ()

Add a straight line segment to the path from the current point to the
point where the path started from (the first C<cr:move_to()> position.

=item cr:copy_path ()

Returns an object containing details of the instructions which define
the current path on I<cr> at the time this is called, as defined by any
calls to methods like C<cr:move_to()> and C<cr:line_to()> made so far.
The return value can be passed to C<cr:append_path()>.  See
L<lua-oocairo-path(3)> for details about what else can be done with
a path object.

=item cr:copy_path_flat ()

Same as C<cr:copy_path()> except that the path returned will not contain
any curves.  If there are curves in the current path they will first be
converted into a series of straight lines.

=item cr:curve_to (c1x, c1y, c2x, c2y, x, y)

Add a curved segment to the current path, from the current point to
S<(I<x>, I<y>)>, with the control points S<(I<c1x>, I<c1y>)> and
S<(I<c2x>, I<c2y>)>.  All six arguments must be numbers.

=item cr:device_to_user (x, y)

Returns two numbers, the position given by the numbers I<x> and I<y>
converted from device coordinates to user coordinates.

=item cr:device_to_user_distance (x, y)

Returns two numbers, the distance given by the numbers I<x> and I<y>
converted from device coordinates to user coordinates.

=item cr:fill ()

Fill in the inside of the current path using colour from the current source.

=item cr:fill_extents ()

Returns four numbers giving two corners of the rectangular area which would
be affected by a call to C<cr:fill()> with the current path.

=item cr:fill_preserve ()

Same as C<cr:fill()> but the current path is left intact for use in
further drawing operations.

=item cr:font_extents ()

Return a table containing metrics for the currently selected font at its
current size, in user-space coordinates (so I<not> scaled etc. according to
the current transformation matrix).  The table will contain the following
entries:

=over

=item ascent

Distance font extends above baseline.

=item descent

Distance font extends below baseline.

=item height

Recommended line height (vertical distance from one baseline to the next).

=item max_x_advance

Largest distance any glyph will advance the text horizontally.

=item max_y_advance

Largest distance any glyph will advance the text vertically.

=back

=item cr:get_antialias ()

Get the current antialiasing mode, which will be one of the strings accepted
by the C<cr:set_antialias()> method.

=item cr:get_current_point ()

Return two numbers, the coordinates of the current point.  Returns no values
if there is no current point.

=item cr:get_dash ()

Return two values, a table and a number, which describe the current dash
pattern and offset in the same format as accepted by C<cr:set_dash()>.

=item cr:get_fill_rule ()

Return the current fill rule as one of the strings accepted by the
C<cr:set_fill_rule()> method.

=item cr:get_font_face ()

Get the currently selected font face (the unscaled font).  See
L<lua-oocairo-fontface(3)> for details on font face objects.

=item cr:get_font_matrix ()

Returns the transformation matrix used for the current font.

=item cr:get_font_options ()

Returns a new font options object containing the options set for font
rendering with this context.  The options won't reflect any defaults
provided by the surface, just the options set with the
C<cr:set_font_options()> method.

See L<lua-oocairo-fontopt(3)> for more about font options objects.

=item cr:get_group_target ()

Returns the surface which is currently the destination of drawing
operations.  This is usually the same as C<cr:get_target()>, except
when C<cr:push_group()> has created a new temporary surface.

=item cr:get_line_cap ()

Returns one of the strings accepted by C<cr:set_line_cap()>.

=item cr:get_line_join ()

Returns one of the strings accepted by C<cr:set_line_join()>.

=item cr:get_line_width ()

Returns a number, the current line width in pixels.

=item cr:get_matrix ()

Returns the current transformation matrix as a table of six numbers.

=item cr:get_miter_limit ()

Returns the current miter limit as a number.

=item cr:get_operator ()

Returns a string indicating the current compositing operator, as set
by the C<cr:set_operator()> method.

=item cr:get_source ()

Return the pattern object current being used as the source.  See
C<lua-oocairo-pattern(3)> for methods available on pattern objects.

=item cr:get_target ()

Returns the surface on which this context will draw.

=item cr:get_tolerance ()

Return a single number, as set by C<cr:set_tolerance()>.

=item cr:glyph_extents (glyphs)

Same as C<cr:text_extents()>, but instead of a string, the I<glyphs> value
should be table in the format accepted by C<cr:show_glyphs()>.

=item cr:glyph_path (glyphs)

Same as C<cr:text_path()>, but instead of string takes a table of glyphs
like C<cr:show_glyphs()>.

=item cr:has_current_point ()

Returns a boolean value, true if there is a current point (as defined with
C<cr:move_to()>.

=item cr:identity_matrix ()

Set the current transformation matrix to the identity matrix, resetting
any transformations which had previously been applied.

=item cr:in_fill (x, y)

Return a boolean value, true if the coordinates are inside the area which
would be filled by the C<cr:fill()> method if it was called with the
current path.

=item cr:in_stroke (x, y)

Return a boolean value, true if the coordinates are inside the area which
would be painted by the C<cr:stroke()> method if it was called with the
current path and line drawing options.

=item cr:line_to (x, y)

Add a straight line segment to the path, from the current point to the
coordinates given.

=item cr:mask (pattern)

=item cr:mask (surface, x, y)

Both of these set a mask which will be used to filter all drawing.  The
parts of the mask which are transparent will still be drawn, but the opaque
parts will not be, and semitransparent pixels work proportionately.

This method will accept either a pattern object or a surface object,
just as for the C<cr:set_source()> method.

The mask only has an alpha channel, so any colour information in the
pattern or surface is ignored.

=item cr:move_to (x, y)

Set the current point to the coordinates given.

=item cr:new_path ()

Discard the current path.

=item cr:new_sub_path ()

Disconnect from the current path, so anything added to it will form a
separate shape.  Mainly used to avoid the extra straight line you get
with the C<cr:arc()> method.

=item cr:paint ()

Copy the source to the surface across the whole surface.  This is the same
as filling a rectangle enclosing the whole area of the surface.

=item cr:paint_with_alpha (alpha)

Same as C<cr:paint()> except the source is blended at the proportion given
by I<alpha>.  An alpha value of one means complete opacity (same as
C<cr:paint()>), and zero means complete transparency (no effect).

=item cr:path_extents ()

Returns four numbers giving two corners of the rectangular bounding box
of the current path.

=item cr:pop_group ()

Finish with the temporary surface created by C<cr:push_group()> and
discard it.

=item cr:pop_group_to_source ()

Finish with the temporary surface created by C<cr:push_group()> and
set it as the source image, as if with a call to C<cr:set_source()>.

=item cr:push_group ([content])

Begin drawing on a new temporary surface.  If I<content> is specified
then it can limit what the temporary surface can store.  It should be
one of the values accepted by the C<surface_create_similar> function
defined in the module table (see L<lua-oocairo(3)>).

=item cr:rectangle (x, y, width, height)

Add the outline of a rectangle to the current path.  All four arguments
must be numbers.  The rectangle path will be closed at the end.

=item cr:rel_curve_to (c1x, c1y, c2x, c2y, x, y)

Same as C<cr:curve_to()> but with coordinates relative to the current point.

=item cr:rel_line_to (x, y)

Same as C<cr:line_to()> but with coordinates relative to the current point.

=item cr:rel_move_to (x, y)

Same as C<cr:move_to()> but with coordinates relative to the current point.

=item cr:reset_clip ()

Reset there to be no clipping.

=item cr:restore ()

Restore the state previously saved with a call to C<cr:save()>.

=item cr:rotate (angle)

Apply a rotation to the current transformation matrix, by I<angle>
radians.

=item cr:save ()

Save the current settings for this context on a stack, so that they can
be altered and then restored to their previous state with a call to
C<cr:restore()>.  Multiple saves and restores can be nested.

=item cr:scale (sx, sy)

Adjust the current transformation matrix to scale everything by the
amount specified by the numbers I<sx> and I<sy>.

=item cr:select_font_face (familyname, slant, weight)

Set the font used by methods such as C<cr:show_text()> to the font
family named by the string I<familyname> with the specified styling.

The I<slant> and I<weight> values are both optional.

If specified, I<slant> must be one of the following strings:

=over

=item normal

The default.

=item italic

=item oblique

=back

If specified, I<weight> must be one of the following strings:

=over

=item normal

The default.

=item bold

=back

=item cr:set_antialias (antialiastype)

Set the antialiasing mode used for drawing.  The argument must be one
of the following strings:

=over

=item default

=item none

=item gray

=item subpixel

=back

Additionally, the argument can be one of the Lua boolean values (C<true>
or C<false>, but not C<nil>), which will simply turn AA on or off by
setting it to C<default> or C<none>.

=item cr:set_dash (dashpattern, offset)

Set the dash pattern used for stroking lines.  The I<dashpattern>
value must be a table, which is an array of numbers defining how long
each dash or gap should be.  If there is only one number then it will
be treated as if the same number were repeated a second time.

The I<offset> must be a number giving the distance into the pattern
at which the stroke should start being drawn.

=item cr:set_fill_rule (fillrule)

Choose the algorithm used for deciding what is inside or outside of a
path when filling its inside.  The argument must be one of the following
strings:

=over

=item winding

=item even-odd

=back

=item cr:set_font_face (font)

Set the selected font to the one given, or to the default font if I<font>
is nil.  See L<lua-oocairo-fontface(3)> for details on font face objects.

=item cr:set_font_matrix (matrix)

Set the transformation matrix used for fonts.  Can be used for rotating
text or slanting the font in unusual ways for example.  The I<matrix>
must be a table of six numbers.

=item cr:set_font_options (options)

Set the options used for rendering fonts.  The value of I<options> must
be a font options object (see L<lua-oocairo-fontopt(3)>).  The current
options can be retrieved with the C<cr:get_font_options()> method.

=item cr:set_font_size (size)

Set the font size to use for methods like C<cr:show_text()>.
The I<size> value must be a number.

=item cr:set_line_cap (style)

Set the style with which the ends of a path are stroked.  The I<style>
value must be one of the following strings:

=over

=item butt

Line ends exactly at end point of path.

=item round

Line is extended in a circle round the end of the path.

=item square

Line is extended in a square round the end of the path.

=back

=item cr:set_line_join (style)

Set the style with which corners of a path are stroked.  The I<style>
value must be one of the following strings:

=over

=item miter

Outside edge of stroke goes straight on to a sharp point.

=item round

Outside edge of line curves in a circle.

=item bevel

Outside edge of line is flattened off.

=back

=item cr:set_line_width (width)

Set the width of lines drawn with the C<cr:stroke()> method to the
number given, in pixels.  The default is two pixels wide.

=item cr:set_matrix (matrix)

Set the current transformation matrix to I<matrix>, which must be a table
containing six numbers.

=item cr:set_miter_limit (limit)

Set the miter limit to the number given.

=item cr:set_operator (operator)

Change the operator used for compositing new paint onto what has already
been drawn.  The value must be one of the following strings:

=over

=item add

=item atop

=item clear

=item dest

=item dest-atop

=item dest-in

=item dest-out

=item dest-over

=item in

=item out

=item over

This is the default.

=item saturate

=item source

=item xor

=back

=item cr:set_source (pattern)

=item cr:set_source (surface, x, y)

Set the source to a ready-made pattern object, or to a surface object with
the given offset.  Setting a pattern object is useful for applying a gradient.
Setting a surface is useful for drawing the contents of one surface onto
another.  The I<x> and I<y> values indicate what position on I<surface>
should be drawn at the origin.

=item cr:set_source_gdk_color (c, [alpha])

Set the source to a solid colour given by a GdkColor value from the
Lua-Gnome library, and optionally an alpha value using the same range
of numbers.  This method is exactly the same as calling C<set_source_rgb>
(or C<set_source_rgba> if I<alpha> is present), except that the red,
green, and blue components are retrieved from I<c> by treating it as a
table, and all the numbers are treated as S<16 bit> unsigned integers
and scaled to the range used by Cairo.

If present and not nil, the opacity value I<alpha> must be a number and
is expected to range from 0 for fully transparent to 0xFFFF (65535) for
completely opaque.

See the example program I<gtk-drawing.lua> for one use of this method
in setting a source colour and opacity from a GtkColorButton widget.

=item cr:set_source_pixbuf (pixbuf, x, y)

=item cr:set_source_pixmap (pixmap, x, y)

Set the source to an image given as a Gdk object.  The value of I<pixbuf>
must be a GdkPixbuf object from the Lua-Gnome library, and that of I<pixmap>
must be a GdkPixmap object.

The I<x> and I<y> coordinates are the same as in C<cr:set_source()>.

Usually, you'll want to use C<set_source_pixbuf>, because pixbufs can
include transparency information.

See example program I<gtk-image.lua> for an example of how to use these
methods.

=item cr:set_source_rgb (r, g, b)

Set the source to a solid colour.  The three values must be numbers from
zero to one.

=item cr:set_source_rgba (r, g, b, a)

Set the source to a solid colour with a level of opacity.  The four values
must be numbers from zero to one.  A value of one for I<a> indicates full
opacity.

=item cr:set_tolerance (tolerance)

Set a number which determines how finely curves are spliced up into straight
lines before being drawn.  Higher numbers can increase the quality of the
output in some situations, but will slow down rendering.

=item cr:show_glyphs (glyphs)

Draw glyphs from a font, but instead of specifying a string of characters,
this method expects the caller to have already worked out which glyphs in
the current font to use, and the exact positions at which they should be
placed.  The I<glyphs> value should be a table containing an array of
tables, each of which should contain three numbers:

=over

=item 1

The index number of the glyph.  The exact meaning of this depends on
which font is selected.

=item 2

The I<x> coordinate at which to draw the glyph on the surface.

=item 3

The I<y> coordinate.

=back

=item cr:show_text (text)

Draw the text given in the string I<text> (which must be encoded as
UTF-8), using the current font face and size, and the current source.
This draws immediately, it doesn't leave a path for further drawing.
See the C<cr:text_path()> method for drawing outlined text.

=item cr:show_text_glyphs (text, glyphs, clusters)

Draw the glyphs given by the I<glyphs> table, in the same way as the
C<cr:show_glyphs()> method, but if the surface supports it, store the
correspondence between the glyphs and the characters in the UTF-8
string I<text> represented by I<clusters>.

The clusters value must be a table.  It may contain a key called C<backward>,
whose value will be a boolean value, true if the clusters are listed in
reverse order.  It should also contain an array part containing pairs
of values; that is, the I<clusters> entries with keys starting with the
number one should each be a table containing two numbers, a number of bytes
in the I<text> string and a number of glyphs in the I<glyphs> array, which
are meant to correspond to each other.

Only available with S<Cairo 1.8> or better.

=item cr:stroke ()

Draw a line along the current path using colour from the current source,
with other settings such line width taken in to account.

=item cr:stroke_extents ()

Returns four numbers giving two corners of the rectangular area which would
be affected by a call to C<cr:stroke()> with the current path.

=item cr:stroke_preserve ()

Same as C<cr:stroke()> but the current path is left intact for use in
further drawing operations.

=item cr:text_extents (text)

Returns a table of metrics describing the how the text in the string I<text>
will appear when rendered with the current font.  The table will contain
the following keys:

=over

=item x_bearing

=item y_bearing

Distance from origin to the top left of the box which will be affected
by drawing the text.

=item width

=item height

Size of bounding box which will be affected by drawing the text.

=item x_advance

=item y_advance

Distance the current point will be moved by showing the text.  In other
words, the relative position where the next piece of text should go.

=back

=item cr:text_path (text)

Set the current path to the outline of the text given in the string
I<text> (which should be encoded as UTF-8), using the glyph shapes from
the current font.  This can be used to draw text with an outline style.

=for syntax-highlight lua

    -- Draw some text in a big outlined font, in two
    -- shades of pink.
    cr:set_font_size(100)
    cr:move_to(50, 150)
    cr:text_path("Foo!")

    -- At this point the path has been set, so we can
    -- draw it like any other shape.
    cr:set_source_rgb(0.6, 0, 0.3)
    cr:fill_preserve()
    cr:set_source_rgb(1, 0.7, 1)
    cr:stroke()

=item cr:transform (matrix)

Apply the transformation encoded in I<matrix>, by multiplying the current
transformation matrix by it.

=item cr:translate (x, y)

Apply a translation transformation, moving the coordinate system by the
amount specified by the two numbers given.

=item cr:user_to_device (x, y)

Returns two numbers, the position given by the numbers I<x> and I<y>
converted from user coordinates to device coordinates.

=item cr:user_to_device_distance (x, y)

Returns two numbers, the distance given by the numbers I<x> and I<y>
converted from user coordinates to device coordinates.

=back

=for comment
vi:ts=4 sw=4 expandtab
